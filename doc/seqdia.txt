title Entity creation

note over User, Engine: Facade

User->+Engine: create entity
Engine->+EntityManager: create entity

EntityManager->EntityManager: pick next entity id
EntityManager->EntityManager: get entity from pool
EntityManager-->-Engine: entity

Engine->+EntityProcessor: entity created

EntityProcessor->+EntityAddition: <<new>>(entity)
EntityAddition-->-EntityProcessor: entityEdit

EntityProcessor-->-EntityProcessor: store
Engine-->-User: entity



#########################################################################################################
title Entity deletion (game logic step)

note over User, Engine: Facade

User->+Engine: remove entity
Engine->+EntityProcessor: entity removed 

EntityProcessor->+EntityDeletion: <<new>>(entity)
EntityDeletion-->-EntityProcessor: entityEdit

EntityProcessor-->-EntityProcessor: store



#########################################################################################################
title Component addition (game logic step)

note over User, Engine: Facade

User->+Engine: add component
Engine->+EntityProcessor: entity component added

EntityProcessor->+EntityComponentAddition: <<new>>(entity)
EntityComponentAddition-->-EntityProcessor: entityEdit

EntityProcessor-->-EntityProcessor: store

Engine-->-User: component



#########################################################################################################
title Processing addition component edits (post game logic step)

Engine->+EntityProcessor: get added component edits
EntityProcessor-->-Engine:

note over Engine, EntityProcessor,EntityManager,EntitySubscription,SubscriptionListener: the component was created in the game logic step, so only notification and bits update are needed

loop foreach component addition edits

    Engine->+EntityManager: add component bit to entity
    EntityManager-->-Engine:

    loop foreach entity subscription
        opt if entity subscription accepts entity
            Engine->+EntitySubscription: notify entity addition
            EntitySubscription->EntitySubscription: add entity to list
            loop foreach listener
                EntitySubscription->+SubscriptionListener: notify entity addition
                SubscriptionListener-->-EntitySubscription:
            end
            EntitySubscription-->-Engine:
        end
    end
end



#########################################################################################################
title Component deletion (game logic step)

note over User, Engine: Facade

User->+Engine: remove component
Engine->+EntityProcessor: entity component removed

EntityProcessor->+EntityComponentDeletion: <<new>>(entity)
EntityComponentDeletion-->-EntityProcessor: entityEdit

EntityProcessor-->-EntityProcessor: store



#########################################################################################################
title Processing remove component edits (post game logic step)

Engine->+EntityProcessor: get remove component edits
EntityProcessor-->-Engine:

loop foreach component deletion edits
    Engine->+ComponentManager: remove component from entity
    ComponentManager->ComponentManager: free the component from the pool
    ComponentManager-->-Engine:

    loop foreach entity subscription
        opt if entity subscription accepts entity
            Engine->+EntitySubscription: notify entity deletion
            loop foreach listener
                EntitySubscription->+SubscriptionListener: notify entity deletion
                SubscriptionListener-->-EntitySubscription:
            end
            EntitySubscription-->-Engine:
        end
    end
    Engine->+EntityManager: remove component bit from entity
    EntityManager-->-Engine:
end



